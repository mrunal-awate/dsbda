1. import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

2. df = pd.read_csv('Social_Network_Ads.csv')

3. df

4. df.drop(['User ID'], axis=1, inplace=True)

5. df.head()

6. df.Purchased.value_counts()

7. df.Gender.value_counts()

8. df.dtypes

9. df.isnull().sum()

10. df.describe()

11. g = sns.catplot(x = "Gender", y = "Purchased", data = df, kind = "bar", height = 4)
g.set_ylabels("Purchased Probability")
plt.show

12. M2 = pd.crosstab(df.Gender, df.Purchased, normalize='index')
print(M2)
M2.plot.bar(figsize=(6,4), stacked=True)
plt.legend(title='Gender vs Purchased', loc='upper right')
plt.show

13. if 'df' in locals() or 'df' in globals():
    corr = df.corr(numeric_only=True)
    print(corr.shape)
else:
    print("Error: DataFrame 'df' is not defined.")

14. x = df.drop(['Gender', 'Purchased'],axis=1)
y = df['Purchased']
x.head()

15. from sklearn.model_selection import train_test_split

16. x_train, x_test, y_train, y_test = train_test_split(x, y,test_size=.2, random_state=42)

print("Training and Testing split was successful.")

17. from sklearn.linear_model import LogisticRegression
basemodel = LogisticRegression()
basemodel.fit(x_train, y_train)
print("Training accuracy: ", basemodel.score(x_train, y_train)*100)

18. y_predict = basemodel.predict(x_test)
print("Testing accuracy: ", basemodel.score(x_test, y_test)*100)

19. from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()

20. x = df[['Age', 'EstimatedSalary']]
x_scaled= scaler.fit_transform(x)
x_train, x_test, y_train, y_test = train_test_split(x_scaled, y, test_size=0.2, random_state=42)
print("Training and testing split was successful.")

21. model= LogisticRegression()
model.fit(X_train,y_train)
y_predict= model.predict(X_test)
print("Training accuracy:", model.score(X_train,y_train)*100)
print("Testing accuracy:", model.score(X_test,y_test)*100)

22. from sklearn.metrics import accuracy_score
Acc=accuracy_score(y_test,y_predict)
print(Acc)

23. from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test,y_predict)
print(cm)

24. from sklearn.metrics import precision_recall_fscore_support
prf= precision_recall_fscore_support(y_test,y_predict)
print('precision:',prf[0])
print('Recall:',prf[1])
print('fscore:',prf[2])
print('support:',prf[3])

25. from sklearn.metrics import classification_report
cr= classification_report(y_test,y_predict)
print(cr)